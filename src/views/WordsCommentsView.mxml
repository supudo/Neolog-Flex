<?xml version="1.0" encoding="utf-8"?>
<s:View xmlns:fx="http://ns.adobe.com/mxml/2009" 
		xmlns:s="library://ns.adobe.com/flex/spark"
		title="Words comments"
		actionBarVisible="false"
		viewActivate="wordsComments_viewActivateHandler(event)"
		backgroundColor="#29435E">
	
	<s:layout>
		<s:VerticalLayout gap="0"/>
	</s:layout>
	
	<fx:Metadata>
		[ResourceBundle("resources")]
	</fx:Metadata> 
	
	<fx:Script>
		<![CDATA[
			import controls.LoadingPopup;
			
			import models.CommentModel;
			
			import mx.collections.ArrayCollection;
			import mx.managers.PopUpManager;
			
			import spark.events.IndexChangeEvent;
			import spark.events.ViewNavigatorEvent;
			
			import utilities.AppSettings;
			import utilities.Synchronization;
			
			protected var _sync:Synchronization;
			
			[Bindable]
			private var commentsModel:CommentModel;
			private var wid:uint = 0;
			private var loadingIndicator:LoadingPopup = new LoadingPopup();
			
			protected function wordsComments_viewActivateHandler(event:ViewNavigatorEvent):void {
				this.title = resourceManager.getString('resources','comms_comments');
				this.loadItems(null);
			}
			
			public function loadItems(event:Event):void {
				if (data != null && data.wid != null) {
					PopUpManager.addPopUp(this.loadingIndicator, this, false);
					PopUpManager.centerPopUp(this.loadingIndicator);

					this.commentsModel = CommentModel.getInstance();
					
					this.wid = data.wid;
					
					if (this.commentsModel.items == null)
						this.commentsModel.items = new ArrayCollection();
					else
						this.commentsModel.items.removeAll();
					
					var ents:Array = AppSettings.getInstance().dbHelper.getCommentsForWord(this.wid);
					
					if (ents != null && ents.length > 0) {
						for (var i:int=0; i<ents.length; i++)
							this.commentsModel.items.addItem(ents[i]);
						PopUpManager.removePopUp(this.loadingIndicator);
					}
					else {
						this._sync = new Synchronization(null);
						this._sync.dbHelper = AppSettings.getInstance().dbHelper;
						this._sync.addEventListener("fetchCommentsFinished", fetchCommentsFinished);
						this._sync.getComments(this.wid);
					}
				}
			}
			
			public function fetchCommentsFinished(event:Event):void {
				AppSettings.getInstance().logThis(null, "fetchCommentsFinished ... ");
				this.removeEventListener("fetchCommentsFinished", fetchCommentsFinished);
				this.loadComments();
			}
			
			protected function loadComments():void {
				if (this.commentsModel.items == null)
					this.commentsModel.items = new ArrayCollection();
				else
					this.commentsModel.items.removeAll();
				
				var ents:Array = AppSettings.getInstance().dbHelper.getCommentsForWord(this.wid);
				
				for (var i:int=0; i<ents.length; i++)
					this.commentsModel.items.addItem(ents[i]);
				PopUpManager.removePopUp(this.loadingIndicator);
			}
			
		]]>
	</fx:Script>
	
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	
	<s:List id="listComments" width="100%" height="100%" dataProvider="{commentsModel.items}"
			alternatingItemColors="[0xF6F6F6, 0xFFFFFF]"
			labelField="comment" textAlign="center" contentBackgroundColor="#29435E" />
	
</s:View>
